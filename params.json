{
  "name": "OOP",
  "tagline": "",
  "body": "# Об'єктно-орієнтоване програмування\r\n\r\n## Мета\r\n\r\n- **Вивчити** основи мови програмування [Java](https://ru.wikipedia.org/wiki/Java).\r\n\r\n- **Ознайомитись** з платформою [Java SE](https://ru.wikipedia.org/wiki/Java_Platform,_Standard_Edition).\r\n\r\n- **Отримати** навички розробки програм з використанням принципів [ООП](https://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5).\r\n\r\n---\r\n\r\n## Зміст\r\n\r\n[Програмні засоби та інструменти](#soft)<br />\r\n[Рекомендації](#references)<br />\r\n[Лабораторні роботи](#labs)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Спільні завдання](#lab_todo)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Вимоги](#lab_requirements)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Робота з репозиторієм](#lab_repo)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Звіт](#lab_report)<br />\r\n[Теми та завдання](#tasks)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1. Типи даних, літерали, операції і оператори](#task_01)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2. Обробка масивів і рядків. Інтерактивні консольні програми](#task_02)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[3. Розробка власних контейнерів. Серіалізація/десеріалізація об'єктів](#task_03)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4. Інкапсуляція. Основи введення/виведення](#task_04)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5. Параметризація в Java. Розробка параметризованих контейнерів](#task_05)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6. Регулярні вирази (Regular Expressions)](#task_06)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7. Паралельне виконання (Concurrency)](#task_07)<br />\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8. Колекції в Java (Java Collections Framework)](#task_08)<br />\r\n[Розрахункове завдання](#summary_task)<br />\r\n[Завдання для студентів заочної форми навчання](#external_task)<br />\r\n[Приклади](#examples)<br />\r\n[Додатки](#appendixes)<br />\r\n[Примітки](#notes)<br />\r\n[Література](#literature)<br />\r\n\r\n---\r\n\r\n<span id=\"soft\"></span>\r\n## Програмні засоби та інструменти\r\n\r\n1. [Java SE Development Kit 8](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) - комплект розробника застосунків на мові Java (див. файл [se_appendix_1.pdf](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/doc/oop_appendix_1.pdf?_format=raw)).\r\n\r\n2. [Eclipse IDE for Java Developers](http://www.eclipse.org/downloads/) - середовище розробки. Додатково встановити:\r\n\r\n\t- [ObjectAid UML Explorer update site URL](http://www.objectaid.net/update/site.xml). Встановити тільки [ObjectAid Class Diagram plug-in](http://www.objectaid.com/class-diagram) - плагін візуалізації кода (показує UML class diagram);\r\n\r\n\t- [Checkstyle update site URL](http://eclipse-cs.sourceforge.net/update) - перевіряє початковий код на відповідність стандартам кодування ([Tutorial](http://www.vogella.com/tutorials/Checkstyle/article.html));\r\n\r\n\t- [Subclipse update site URL](http://subclipse.tigris.org/update_1.10.x) <sup><abbr title=\"SVN-репозиторій використовувати за розсудом викладача\">[1](#note_svn)</abbr></sup> - Eclipse plug-in which provides support for Subversion ([Project home](http://subclipse.tigris.org/)). Встановити компоненти:\r\n\r\n\t\t- Subclipse;\r\n\r\n\t\t- Subversion Client Adapter;\r\n\r\n\t\t- Subversion JavaHL Native Library Adapter;\r\n\r\n\t- [Regex Util update site URL](http://regex-util.sourceforge.net/update/) - для зручної перевірки [регулярних виразів](https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F) ([Project home](http://myregexp.com/eclipsePlugin.html)). Відкрити в Eclipse за допомогою меню `Window / Show View / Other / Regex Util`.\r\n\r\n3. [TortoiseSVN](http://tortoisesvn.net/downloads.html) <sup><abbr title=\"SVN-репозиторій використовувати за розсудом викладача\">[1](#note_svn)</abbr></sup> - Subversion (SVN) client. В лабораторіях ОЦ НТУ \"ХПІ\" включити використання *proxy-сервера* в меню *TortoiseSVN/Settings/Network*:\r\n\r\n\t- Enable Proxy Server;\r\n\r\n\t- Server address: 172.17.10.2;\r\n\r\n\t- Port: 3128.\r\n\r\n4. [SVN Hosting](https://www.assembla.com) <sup><abbr title=\"SVN-репозиторій використовувати за розсудом викладача\">[1](#note_svn)</abbr></sup> - веб-сервіс управління версіями:\r\n\r\n\t- потрібна попередня реєстрація [GET STARTED WITH FREE REPOSITORIES](https://www.assembla.com/repositories);\r\n\r\n\t- при реєстрації обов'язково вказувати **Username** у вигляді **surname_name** - прізвище та ім'я розробника [латинкою в нижньому регістрі](http://translit.kh.ua/?lat&passport);\r\n\r\n---\r\n\r\n<span id=\"references\"></span>\r\n## Рекомендації\r\n\r\n- **Використовувати:**\r\n\r\n\t- [Java Code Conventions](http://www.oracle.com/technetwork/java/codeconventions-150003.pdf), ~128 KB;\r\n\t\r\n\t- [Java Language Specification](http://docs.oracle.com/javase/specs/jls/se8/jls8.pdf), ~3.75 MB;\r\n\r\n\t- [Java SE Development Kit 8 Documentation](http://www.oracle.com/technetwork/java/javase/documentation/jdk8-doc-downloads-2133158.html), ~86 MB;\r\n\r\n\t- [Java SE Tutorial](http://www.oracle.com/technetwork/java/javase/java-tutorial-downloads-2005894.html), ~133 MB.\r\n\t\r\n\t- [Java SE Client Technologies: JavaFX](http://docs.oracle.com/javase/8/javase-clienttechnologies.htm), online + PDFs.\r\n\r\n- **Ознайомитись:**\r\n\r\n\t- [Tutorial - Introduction to Java programming](http://www.vogella.com/tutorials/JavaIntroduction/article.html);\r\n\r\n\t- [Tutorial - Eclipse IDE](http://www.vogella.com/tutorials/Eclipse/article.html);\r\n\r\n\t- [Tutorial - Eclipse Shortcuts](http://www.vogella.com/tutorials/EclipseShortcuts/article.html);\r\n\r\n\t- [Tutorial - Java Debugging with Eclipse](http://www.vogella.com/tutorials/EclipseDebugging/article.html)\r\n\r\n\t- [Tutorial - Using the Checkstyle Eclipse plug-in](http://www.vogella.com/tutorials/Checkstyle/article.html);\r\n\r\n\t- [Java Platform Standard Edition 8 Documentation](http://docs.oracle.com/javase/8/docs/);\r\n\r\n\t- [Java Tutorials](http://docs.oracle.com/javase/tutorial/index.html);\r\n\r\n\t- [How to Write Doc Comments](http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html);\r\n\r\n\t- [Google Java Style](http://google-styleguide.googlecode.com/svn/trunk/javaguide.html);\r\n\r\n\t- [Навігація і редагування в Eclipse](http://habrahabr.ru/post/168223/);\r\n\r\n\t- [Словник термінів ООП](http://vmk.ugatu.ac.ru/book/buch/glossary.htm).\r\n\r\n---\r\n\r\n<span id=\"labs\"></span>\r\n## Лабораторні роботи\r\n\r\n<span id=\"lab_todo\"></span>\r\n### Спільні завдання\r\n\r\n|  №  | Завдання |\r\n| --- | :------- |\r\n|  1  | Розробити програму для рішення [індивідуального завдання](#tasks) |\r\n|  2  | Виконати рефакторинґ з урахуванням загальних [вимог](#lab_requirements) |\r\n|  3  | Підготувати до перевірки опис розробленої програми у вигляді [звіту](#lab_report) |\r\n|  4  | Виправити програму з урахуванням отриманих зауважень |\r\n\r\n<span id=\"lab_requirements\"></span>\r\n### Вимоги\r\n\r\n1. **Рішення** всіх лабораторних робіт розміщувати у відповідних пакетах єдиного проекту Eclipse:\r\n\r\n\t- **проект** повинен мати назву `surname` - прізвище розробника [латинкою в нижньому регістрі](http://translit.kh.ua/?lat&passport);\r\n\r\n\t- **пакети**, що містять всі розроблені класи та підпакети для кожного рішення, повинні мати назву `ua.khpi.oop.surnameXX`, де *XX* - номер роботи.\r\n\r\n2. **Початковий** код повинен відповідати [Java Code Conventions](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/doc/Java_Code_Conventions.pdf?_format=raw).\r\n\r\n3. **Коментарі** використовувати для автоматичної генерації документації за допомогою [Javadoc](http://www.oracle.com/technetwork/java/javase/documentation/index-137868.html), [вікі](https://uk.wikipedia.org/wiki/Javadoc).\r\n\r\n4. **Схему** класів *(class diagram)* обов'язково розміщувати в кореневому пакеті кожного рішення (png-рисунки).\r\n\r\n<span id=\"lab_repo\"></span>\r\n### Робота з репозиторієм <sup><abbr title=\"SVN-репозиторій використовувати за розсудом викладача\">[1](#note_svn)</abbr></sup>\r\n\r\n1. **Початковий** код (лише той, що успішно компілюється) розташовувати в директоріях `surname/src` у відповідних пакетах, де *surname* - назва особистої директорії в спільному сховищі, що відповідає назві проекту Eclipse.\r\n\r\n2. **Звіти** розташовувати в директоріях `surname/doc/surnameXX`, де *XX* - номер рішення.\r\n\r\n3. **Повідомлення** до коміту - що саме ви зберігаєте - має бути зрозумілим. У заголовку повідомлення вказувати:\r\n\r\n\t- **номер** тікета (завдання) - номер у [таблиці](#lab_todo), що містить список спільних завдань та зауважень;\r\n\r\n\t- **тему/компонент** до якого належить коміт. Наприклад:\r\n\r\n\t\t`#12 shevchenko01: завдання виконано, звіт готовий до перевірки`\r\n\r\n\t\t`#17 Locator: алгоритм пошуку оптимізовано`\r\n\r\n\t\t`#22, #23 Task01: відформатовано текст, додано коментарів`\r\n\r\n4. **Командою** *Team / Share Project with SVN Repository* можна помістити в репозиторій проект Eclipse:\r\n\r\n\t- в діалоговому вікні обрати *Use existing repository location*;\r\n\r\n\t- вказати *Checkout URL* спільного сховища.\r\n\r\n5. **Checkout URL** для доступу до особистої директорії формується додаванням до *Checkout URL* спільного сховища назви особистої директорії. Наприклад, загальне сховище має *Checkout URL:*\r\n\r\n\t`https://subversion.assembla.com/svn/kitXX-2015-oop/`\r\n\r\n\tТоді *Checkout URL* для доступу до особистої директорії *shevchenko*:\r\n\r\n\t`https://subversion.assembla.com/svn/kitXX-2015-oop/shevchenko`\r\n\r\n6. **Приклад** структури репозиторія проекта з назвою `xone`, якщо *Checkout URL* спільного сховища\r\n\r\n\t`https://subversion.assembla.com/svn/khpi-oop/`\r\n\r\n| Проект *xone* | Репозиторій проекта *xone* |\r\n| ------------- | -------------------------- |\r\n| ![Приклад структури проекту xone](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/res/ex_eclipse_xone.png?_format=raw) | ![Приклад структури репозиторія проекту xone](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/res/ex_svn_xone.png?_format=raw) |\r\n\r\n<span id=\"lab_report\"></span>\r\n### Звіт\r\n\r\n1. **Оформляється** українською мовою та надається у вигляді електронних документів:\r\n\r\n\t- що редагується *(docx/doc/odt/html/md/txt)*;\r\n\r\n\t- що зручно проглядається *(pdf/djvu/chm)* .\r\n\r\n2. **Формат**:\r\n\r\n\t- A4 з полями: **2.5 см** зліва, **2 см** праворуч, **2 см** зверху, **2 см** знизу;\r\n\r\n\t- гарнітура: **Times New Roman**; кегль: **14**; міжрядковий інтервал: **одинарний**;\r\n\r\n\t- відступ першого рядка абзацу: **1.27 см**; вирівнювання: **у ширину**.\r\n\r\n3. **Приклад** (див. файл [oop_appendix_2.pdf](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/doc/oop_appendix_2.pdf?_format=raw)).\r\n\r\n4. **Структура**:\r\n\r\n| Обов'язковий розділ | Зауваження |\r\n| ------------------- | ---------- |\r\n| **Номер і тема роботи** | Вказується з вирівнюванням по центру рядка |\r\n| **Мета: ...** | Відповідає темі та завданню |\r\n| **1 ІНДИВІДУАЛЬНЕ ЗАВДАННЯ** | Повне формулювання завдання |\r\n| **2 РОЗРОБКА ПРОГРАМИ** | Особливості рішення, структура проекту, схеми та ілюстрації |\r\n| **&nbsp;&nbsp;&nbsp;2.1 Засоби ООП** |   |\r\n| **&nbsp;&nbsp;&nbsp;2.2 Ієрархія та структура класів** |   |\r\n| **&nbsp;&nbsp;&nbsp;2.3 Опис програми** |   |\r\n| **&nbsp;&nbsp;&nbsp;2.4 Важливі фрагменти програми** |   |\r\n| **3 РЕЗУЛЬТАТИ РОБОТИ** | Копії екрану (screenshots) та їхній опис |\r\n| **ВИСНОВКИ** | Заключення стосовно повноти досягнення мети |\r\n\r\n---\r\n\r\n<span id=\"tasks\"></span>\r\n<span id=\"task_01\"></span>\r\n## 1. Типи даних, літерали, операції і оператори\r\n\r\n### Мета\r\n\r\nОзнайомлення з платформою Java SE та середовищем розробки Eclipse IDE.\r\n\r\n### Загальне завдання\r\n\r\nВирішити три прикладні задачі на мові Java в середовищі Eclipse.\r\n\r\n<span id=\"task_01_app\"></span>\r\n### Прикладні задачі\r\n\r\n1. Знайти найбільший спільний дільник двох цілих позитивних чисел.\r\n\r\n2. Знайти суму цифр заданого цілого числа.\r\n\r\n3. Перевірити, чи є задане число простим (тобто не ділиться без залишку на жодні числа, крім себе і 1).\r\n\r\n---\r\n\r\n<span id=\"task_02\"></span>\r\n## 2. Обробка масивів і рядків. Інтерактивні консольні програми\r\n\r\n### Мета\r\n\r\n- Набуття навичок вирішення прикладних задач з використанням масивів і рядків.\r\n\r\n- Реалізація діалогового режиму роботи з користувачем в консольних програмах.\r\n\r\n### Загальне завдання\r\n\r\n1. Розробити консольну програму для вирішення прикладної задачі ([Class String](http://docs.oracle.com/javase/8/docs/api/java/lang/String.html), [Manipulating Characters in a String](https://docs.oracle.com/javase/tutorial/java/data/manipstrings.html), [Comparing Strings and Portions of Strings](https://docs.oracle.com/javase/tutorial/java/data/comparestrings.html)).\r\n\r\n2. Забезпечити діалоговий режим роботи з користувачем (введення, результат, вихід і т.д.).\r\n\r\n3. Використовувати параметри командного рядка для визначення режиму роботи програми.\r\n\r\n4. При вирішенні прикладних задач використовувати латинку.\r\n\r\n5. Для обробки даних використовувати класи-утиліти ([Utility Class](https://en.wikipedia.org/wiki/Utility_class)), продемонструвати використання об'єктів класу [StringBuilder](http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuilder.html) або [StringBuffer](http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html).\r\n\r\n### Зауваження\r\n\r\n- У програмі має бути реалізовано текстове меню, яке містить команди для визначення користувачем того чи іншого режиму роботи: введення даних; перегляд даних; виконання обчислень; перегляд результату.\r\n\r\n- Крім меню, для визначення режиму роботи та інших вхідних даних, користувач може використовувати параметри запуску консольної програми в командному рядку.\r\n\r\n</pre>\r\n\r\n<span id=\"task_02_app\"></span>\r\n### Прикладні задачі\r\n\r\n1. Ввести несколько строк. Разбить строки на три группы: начинается с гласной; начинается с согласной; начинается не с буквы. Найти самую короткую строку в каждой группе. Вывести эту строку и ее длину.\r\n\r\n2. Ввести несколько строк. Упорядочить и вывести строки по алфавиту (первый приоритет) и в порядке возрастания их длин (второй приоритет).\r\n\r\n3. Ввести несколько строк. Разбить на две группы: строки, длина которых меньше средней; строки, длина которых не меньше средней. Вывести строки и их длины.\r\n\r\n4. Ввести текст. В каждом слове текста k-ю букву заменить заданным символом. Если k больше длины слова, выдать сообщение и корректировку не выполнять. Исходные данные и результат вывести в виде таблицы.\r\n\r\n5. Ввести текст. В тексте каждую букву заменить ее номером в алфавите. Вывести результат следующим образом: в одной строке печатать текст с двумя пробелами между буквами, в следующей строке внизу под каждой буквой печатать ее номер.\r\n\r\n6. Ввести текст. Из текста удалить все символы, кроме пробелов, не являющиеся буквами. Повторяющиеся пробелы заменить на одиночные. Между последовательностями букв разделённых непробелами (знаками препинания), оставить хотя бы один пробел. Вывести исходный текст и результат.\r\n\r\n7. Ввести текст. Из текста удалить все слова заданной длины, начинающиеся на согласную букву. Вывести исходный текст и результат.\r\n\r\n8. Ввести текст. В тексте найти все пары слов, из которых одно является обращением (словом наоборот) другого. Результат вывести в виде таблицы.\r\n\r\n9. Ввести текст. Найти и напечатать, сколько раз повторяется в тексте каждое слово. Результат вывести в виде таблицы.\r\n\r\n10. Ввести текст. Найти, каких букв, гласных или согласных, больше в каждом предложении текста. Результат вывести в виде таблицы.\r\n\r\n11. Ввести текст. В тексте слова заданной длины заменить указанной подстрокой. Вывести исходный текст и результат.\r\n\r\n12. Ввести текст. Текст разбить на предложения. Для каждого предложения вывести слова, у которых первая и последняя буквы совпадают. Результат вывести в виде таблицы.\r\n\r\n13. Ввести текст. Текст разбить на предложения. Для каждого предложения найти и напечатать все слова максимальной и все слова минимальной длины. Результат вывести в виде таблицы.\r\n\r\n14. Ввести текст. После каждого слова текста, заканчивающегося заданным символом, вставить указанное слово. Вывести исходный текст и результат.\r\n\r\n15. Ввести текст. В тексте найти и вывести все слова-палиндромы.\r\n\r\n---\r\n\r\n<span id=\"task_03\"></span>\r\n## 3. Розробка власних контейнерів. Серіалізація/десеріалізація об'єктів\r\n\r\n### Мета\r\n\r\n- Набуття навичок розробки власних контейнерів.\r\n\r\n- Ознайомлення з принципами серіалізації/десеріалізації об'єктів.\r\n\r\n### Загальне завдання\r\n\r\n1. Розробити клас-контейнер, що [ітерується](http://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html) та [серіалізується](http://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html) для збереження початкових даних завдання [л.р. №2](#task_02_app) у вигляді **масиву об'єктів** з можливістю додавання, видалення і зміни елементів.\r\n\r\n2. Реалізувати і продемонструвати тривале зберігання/відновлення контейнера за допомогою [серіалізації/десеріалізації](http://www.ibm.com/developerworks/ru/library/j-5things1/) ([Tutorial](http://www.vogella.com/tutorials/JavaSerialization/article.html)).\r\n\r\n3. Обмінятися відкомпільованим (без початкового коду) службовим класом (Utility Class) рішення задачі [л.р. №2](#task_02_app) з іншим студентом (визначає викладач).\r\n\r\n4. Продемонструвати вирішення двох варіантів (власного і отриманого за обміном) прикладних задач [л.р. №2](#task_02_app) для послідовної та вибіркової обробки елементів розробленого контейнера.\r\n\r\n5. Розробити консольну програму та забезпечити діалоговий режим роботи з користувачем для демонстрації та тестування рішення.\r\n\r\n---\r\n\r\n<span id=\"task_04\"></span>\r\n## 4. Інкапсуляція. Основи введення/виведення\r\n\r\n### Мета\r\n\r\n- Використання об'єктно-орієнтованого підходу для вирішення прикладної задачі.\r\n\r\n- Освоєння основ управління введенням/виведенням даних.\r\n\r\n### Загальне завдання\r\n\r\n1. Використовуючи принципи інкапсуляції, реалізувати клас для представлення сутності відповідно прикладної задачі.\r\n\r\n2. Забезпечити і продемонструвати коректне введення та відображення кирилиці.\r\n\r\n3. Продемонструвати можливість управління масивом об'єктів розробленого класу.\r\n\r\n4. Забезпечити можливість збереження і відновлення масива об'єктів, не використовуючи протокол серіалізації.\r\n\r\n5. Забезпечити діалог з користувачем у вигляді простого текстового меню.\r\n\r\n6. При збереженні та відновленні даних забезпечити діалоговий режим вибору директорії з відображенням вмісту і можливістю переміщення по підкаталогах.\r\n\r\n<span id=\"task_04_app\"></span>\r\n### Прикладні задачі\r\n\r\n1. Кадровое агентство<span id=\"task_04_01\"></span>. Данные о соискателе: регистрационный номер; опыт работы - набор значений \"cпециальность, стаж\"; образование; дата увольнения; требования к будущей работе - набор необязательных свойств вида \"cпециальность, условия труда, минимальная зарплата\".\r\n\r\n2. Кадровое агентство<span id=\"task_04_02\"></span>. Данные о вакансии: фирма; cпециальность; условия труда; оплата; требования к специалисту - набор необязательных свойств вида \"cпециальность, стаж, образование\".\r\n\r\n3. Адресная книга<span id=\"task_04_03\"></span>. Запись: Ф.И.О.; дата рождения; телефоны (количество не ограничено); адрес; дата и время редактирования.\r\n\r\n4. Библиотека<span id=\"task_04_04\"></span>. Данные о книге: ISBN; название; авторы (количество не ограничено); издательство; жанр; дата издания.\r\n\r\n5. Справочник покупателя<span id=\"task_04_05\"></span>. Торговая точка: название; адрес; телефоны (количество не ограничено); специализация; время работы (с указанием дней недели).\r\n\r\n6. Полицейская картотека<span id=\"task_04_06\"></span>. Данные о преступнике: Ф.И.О.; дата рождения; даты судимостей (количество не ограничено); дата последнего лишения свободы; дата последнего освобождения.\r\n\r\n7. Бюро знакомств<span id=\"task_04_07\"></span>. Запись о клиенте: пол; регистрационный номер; дата регистрации; сведения о себе (произвольный набор свойств: имя, рост, цвет глаз, дата рождения, хобби и т.д.); требования к партнеру (произвольный набор свойств).\r\n\r\n8. Автостанция<span id=\"task_04_08\"></span>. Запись в расписании: номер рейса; время отправления; дни недели; количество свободных мест; маршрут - неограниченный набор значений вида \"название станции, время прибытия\".\r\n\r\n9. Билетная касса<span id=\"task_04_09\"></span>. Данные о маршруте: маршрут - неограниченный набор значений вида \"название станции, время прибытия (для промежуточных и конечной), время отправления (для начальной и промежуточных), количество свободных мест\"; общее количество мест; дни недели; номер рейса.\r\n\r\n10. Отдел кадров<span id=\"task_04_10\"></span>. Личное дело сотрудника: паспортные данные; образование; оклад; карьера - набор значений \"дата назначения, должность, отдел\"; характеристика - набор свойств и оценок.\r\n\r\n11. Магазин<span id=\"task_04_11\"></span>. Запись в каталоге товаров: наименование; единица измерения; количество; цена единицы; дата поступления; описание (неограниченный набор характеристик вида \"свойство, значение\").\r\n\r\n12. Аудиотека<span id=\"task_04_12\"></span>. Композиция: название; жанр; исполнитель; текст (если есть); дата создания; длительность; формат данных; рейтинг (набор характеристик вида \"свойство, значение\").\r\n\r\n13. Гостиница<span id=\"task_04_13\"></span>. Заказ номера: паспортные данные; даты поселения и выселения; номер (класс, число мест); причина поселения (количество не ограничено).\r\n\r\n14. Планировщик<span id=\"task_04_14\"></span>. Мероприятие: дата, время и протяженность; место проведения; описание; участники (количество не ограничено).\r\n\r\n15. Автосалон<span id=\"task_04_15\"></span>. Автомобиль: марка, год выпуска, технические характеристики в виде \"параметр - значение\" (среди которых расход топлива в городском и загородном цикле), техническое состояние, запрашиваемая цена.\r\n\r\n16. Полицейская картотека<span id=\"task_04_16\"></span>. Данные о заключённом: Ф.И.О.; дата рождения; рост; цвет глаз; особые приметы (количество не ограничено); дата заключения; дата освобождения.\r\n\r\n---\r\n\r\n<span id=\"task_05\"></span>\r\n## 5. Параметризація в Java. Розробка параметризованих контейнерів\r\n\r\n### Мета\r\n\r\n1. Вивчення принципів параметризації в Java.\r\n\r\n2. Розробка параметризованих класів та методів.\r\n\r\n### Загальне завдання\r\n\r\nВикористовуючи програму рішення завдання [лабораторної роботи №4](#task_04):\r\n\r\n1. Створити власний клас-контейнер, що параметризується ([Generic Type](https://docs.oracle.com/javase/tutorial/java/generics/types.html)) для реалізації колекції об'єктів на основі [зв'язних списків](https://ru.wikipedia.org/wiki/%D0%A1%D0%B2%D1%8F%D0%B7%D0%BD%D1%8B%D0%B9_%D1%81%D0%BF%D0%B8%D1%81%D0%BE%D0%BA).\r\n\r\n2. Для розроблених класів-контейнерів забезпечити можливість використання їх об'єктів у циклі [foreach](https://docs.oracle.com/javase/8/docs/technotes/guides/language/foreach.html) в якості джерела даних.\r\n\r\n3. Створити клас утиліт, що надає параметризовані методи ([Generic Methods](https://docs.oracle.com/javase/tutorial/java/generics/methods.html)) для обробки контейнерів об'єктів згідно [прикладної задачі](#task_05_app).\r\n\r\n4. Забезпечити можливість збереження та відновлення контейнера об'єктів, не використовуючи протокол серіалізації.\r\n\r\n5. Продемонструвати розроблену функціональність (створення, управління та обробку власних контейнерів) в діалоговому та автоматичному режимах.\r\n\r\n### Зауваження\r\n\r\n- Заборонено використання контейнерів (колекцій) і алгоритмів з [Java Collections Framework](https://docs.oracle.com/javase/8/docs/technotes/guides/collections/).\r\n\r\n- Автоматичний режим виконання програми задається параметром командного рядка **-auto**. Наприклад, `java ClassName -auto`.\r\n\r\n- В автоматичному режимі діалог з користувачем відсутній, необхідні данні генеруються, або зчитуються з файлу.\r\n\r\n<span id=\"task_05_app\"></span>\r\n### Прикладні задачі\r\n\r\n1. [Кадровое агентство](#task_04_01). Сортировка по регистрационному номеру, суммарному стажу, среднему значению требуемой минимальной зарплаты.\r\n\r\n2. [Кадровое агентство](#task_04_02). Сортировка по названию фирмы, названию предлагаемой cпециальности, требуемому образованию.\r\n\r\n3. [Адресная книга](#task_04_03). Сортировка по фамилии, имени, дате рождения, дате редактирования.\r\n\r\n4. [Библиотека](#task_04_04). Сортировка по названию, издательству, жанру, дате издания.\r\n\r\n5. [Справочник покупателя](#task_04_05). Сортировка по названию, городу в адресе, специализации.\r\n\r\n6. [Полицейская картотека](#task_04_06). Сортировка по фамилии, дате рождения, дате последнего лишения свободы, дате последнего освобождения.\r\n\r\n7. [Бюро знакомств](#task_04_07). Сортировка по дате регистрации, количеству свойств в разделе \"сведения о себе\", количеству свойств в разделе \"требования к партнеру\".\r\n\r\n8. [Автостанция](#task_04_08). Сортировка по номеру рейса, времени отправления, количеству свободных мест.\r\n\r\n9. [Билетная касса](#task_04_09). Сортировка по общему количеству мест, дню недели, номеру рейса.\r\n\r\n10. [Отдел кадров](#task_04_10). Сортировка по серии и номеру паспорта, окладу, средней оценке.\r\n\r\n11. [Магазин](#task_04_11). Сортировка по наименованию товара, цене единицы, дате поступления.\r\n\r\n12. [Аудиотека](#task_04_12). Сортировка по названию композиции, исполнителю, среднему значению рейтинга.\r\n\r\n13. [Гостиница](#task_04_13). Сортировка по длительности проживания, классу номера, числу занимаемых мест.\r\n\r\n14. [Планировщик](#task_04_14). Сортировка по дате мероприятия, длительности, количеству участников.\r\n\r\n15. [Автосалон](#task_04_15). Сортировка по году выпуска автомобиля, расходу топлива в смешанном цикле, запрашиваемой цене.\r\n\r\n16. [Полицейская картотека](#task_04_16). Сортировка по фамилии, дате рождения, дате заключения, дате освобождения.\r\n\r\n---\r\n\r\n<span id=\"task_06\"></span>\r\n## 6. Регулярні вирази ([Regular Expressions](https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F), [Lars Vogel Tutorial](http://www.vogella.com/tutorials/JavaRegularExpressions/article.html))\r\n\r\n### Мета\r\n\r\nОзнайомлення з принципами використання регулярних виразів для обробки тексту.\r\n\r\n### Загальне завдання\r\n\r\n1. Використовуючи програму рішення завдання [лабораторної роботи №5](#task_05), продемонструвати ефективне (оптимальне) використання регулярних виразів:\r\n\t- для перевірки коректності (валідації) даних, що вводяться;\r\n\t- при вирішенні [прикладної задачі](#task_06_app).\r\n\r\n2. Передбачити можливість незначної зміни умов пошуку.\r\n\r\n3. Продемонструвати розроблену функціональність в діалоговому та автоматичному режимах.\r\n\r\n<span id=\"task_06_app\"></span>\r\n### Прикладні задачі\r\n\r\n1. [Кадровое агентство](#task_04_01). Найти всех соискателей с опытом работы в сфере менеджмента, не желающих ездить в командировки.\r\n\r\n2. [Кадровое агентство](#task_04_02). Найти все вакансии, где требуются преподаватели (педагоги, учителя) со стажем не менее 10 лет, знающие английский язык и владеющие автомобилем.\r\n\r\n3. [Адресная книга](#task_04_03). Найти все записи о тех, кто имеет Харьковский номер телефона и является абонентом сетей Life и Kyivstar.\r\n\r\n4. [Библиотека](#task_04_04). Найти все книги за последние пять лет у которых хотя бы один автор имеет инициалы \"Й. Й.\" и книги, ISBN которых содержит последовательность цифр \"...9X9X9...\" (\"X\" - одна любая цифра, \"...\" - один или несколько символов).\r\n\r\n5. [Справочник покупателя](#task_04_05). Найти все торговые точки, работающие без выходных и перерыва на обед, предоставляющие для консультации короткий телефонный номер и имеющих контактные телефоны украинских операторов сотовой связи.\r\n\r\n6. [Полицейская картотека](#task_04_06). Найти всех заключённых не моложе 20 лет с фамилией, которая начинается с гласной и содержит сочетание \"ко\". Например: Архипенко, Ишкова, Ермаков, Янковский.\r\n\r\n7. [Бюро знакомств](#task_04_07). Найти все комбинации пар из разнополых партнёров с разницей в возрасте не более 5 лет для утренних пробежек в парках Киевского района (может быть указано в произвольной форме в требованиях к партнеру).\r\n\r\n8. [Автостанция](#task_04_08). Найти все утренние рейсы по выходным дням из Харькова в Киев с остановкой в Полтаве.\r\n\r\n9. [Билетная касса](#task_04_09). Найти все вечерние маршруты, проходящие через Харьков (транзитные) по понедельникам и пятницам.\r\n\r\n10. [Отдел кадров](#task_04_10). Найден сильно повреждённый паспорт. Чётко виден последний символ серии паспорта \"М\", некоторые цифры номера: \"...8...6...\" и некоторые буквы фамилии владельца: \"Ар...е...\" (\"...\" означает наличие одного или нескольких символов). Найти всех сотрудников, которые могли бы владеть этим документом.\r\n\r\n11. [Магазин](#task_04_11). Найти все товары с актуальным сроком годности. Дата производства, срок годности (время хранения или дата истечения) могут быть указаны в описании к товару.\r\n\r\n12. [Аудиотека](#task_04_12). Найти аудиозаписи, сжатые с минимальными потерями или без потерь аудиоданных (определяется форматом), в названии или тексте которых упоминается празднование Нового Года.\r\n\r\n13. [Гостиница](#task_04_13). Найти всех проживающих клиентов, выполняющих служебные поручения вне места постоянной работы.\r\n\r\n14. [Планировщик](#task_04_14). Найти все конференции, прошедшие за последние три года в Харькове и области, длившиеся не менее суток.\r\n\r\n15. [Автосалон](#task_04_15). Найти все электромобили не старше одного года.\r\n\r\n16. [Полицейская картотека](#task_04_16). Найти всех, освобождённых из под стражи лиц, с нательным рисунком в виде собственного имени.\r\n\r\n---\r\n\r\n<span id=\"task_07\"></span>\r\n## 7. Паралельне виконання ([Concurrency](https://docs.oracle.com/javase/tutorial/essential/concurrency/), [Lars Vogel Tutorial](http://www.vogella.com/tutorials/JavaConcurrency/article.html))\r\n\r\n### Мета\r\n\r\n- Ознайомлення з моделлю потоків Java.\r\n\r\n- Організація паралельного виконання декількох частин програми.\r\n\r\n### Загальне завдання\r\n\r\nВикористовуючи програму рішення завдання [лабораторної роботи №5](#task_05), продемонструвати можливість паралельної обробки елементів контейнера.\r\n\r\n1. Створити не менше трьох додаткових потоків, на яких викликати відповідні методи обробки контейнера.\r\n\r\n2. Результати паралельної обробки звести в таблицю і порівняти час паралельної і послідовної обробки ([Приклад визначення часу обробки даних](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo/src/ua/khpi/oop/demo03/Main.java)).\r\n\r\n3. Зробити висновки про ефективність розпаралелювання.\r\n\r\n### Зауваження\r\n\r\n1. Для паралельної обробки рекомендується використовувати алгоритми, що не змінюють початкову колекцію.\r\n\r\n2. Складність алгоритмів обробки колекції повинна бути зіставна, а час виконання приблизно однаковий, наприклад:\r\n\t- пошук мінімуму або максимуму;\r\n\t- обчислення середнього значення або суми;\r\n\t- підрахунок елементів, що задовольняють деякій умові;\r\n\t- відбір за заданим критерієм;\r\n\t- власний варіант, що відповідає обраній прикладної області.\r\n\r\n---\r\n\r\n<span id=\"task_08\"></span>\r\n## 8. Колекції в Java ([Java Collections Framework](https://docs.oracle.com/javase/8/docs/technotes/guides/collections/reference.html), [Tutorial](http://docs.oracle.com/javase/tutorial/collections/index.html))\r\n\r\n### Мета\r\n\r\n- Ознайомлення зі [структурою](https://docs.oracle.com/javase/8/docs/technotes/guides/collections/overview.html) бібліотеки колекцій Java.\r\n\r\n- Використання колекцій для розміщення об'єктів розроблених класів.\r\n\r\n### Загальне завдання\r\n\r\nРозробити консольну програму для реалізації завдання обробки даних згідно [прикладної області](#task_08_app).\r\n\r\n1. Для розміщення та обробки даних використовувати контейнери (колекції) і алгоритми з [Java Collections Framework](https://docs.oracle.com/javase/8/docs/technotes/guides/collections/).\r\n\r\n2. Забезпечити обробку колекції об'єктів: додавання, видалення, пошук, сортування.\r\n\r\n3. Передбачити можливість довготривалого зберігання даних.\r\n\r\n4. Додаткову функціональність обрати самостійно відповідно до [прикладної області](#task_08_app).\r\n\r\n5. Продемонструвати розроблену функціональність в діалоговому та автоматичному режимах.\r\n\r\n<span id=\"task_08_app\"></span>\r\n### Прикладна область\r\n\r\n1. [Кадровое агентство](#task_04_01).\r\n\r\n2. [Кадровое агентство](#task_04_02).\r\n\r\n3. [Адресная книга](#task_04_03).\r\n\r\n4. [Библиотека](#task_04_04).\r\n\r\n5. [Справочник покупателя](#task_04_05).\r\n\r\n6. [Полицейская картотека](#task_04_06).\r\n\r\n7. [Бюро знакомств](#task_04_07).\r\n\r\n8. [Автостанция](#task_04_08).\r\n\r\n9. [Билетная касса](#task_04_09).\r\n\r\n10. [Отдел кадров](#task_04_10).\r\n\r\n11. [Магазин](#task_04_11).\r\n\r\n12. [Аудиотека](#task_04_12).\r\n\r\n13. [Гостиница](#task_04_13).\r\n\r\n14. [Планировщик](#task_04_14).\r\n\r\n15. [Автосалон](#task_04_15).\r\n\r\n16. [Полицейская картотека](#task_04_16).\r\n\r\n---\r\n\r\n<span id=\"summary_task\"></span>\r\n## Розрахункове завдання <sup><abbr title=\"Уточнення завдання і засобів розробки за розсудом викладача\">[2](#note_summary)</abbr></sup>\r\n\r\n### Тема\r\n\r\nРозробка графічного інтерфейсу користувача.\r\n\r\n### Мета\r\n\r\nПридбання навичок використання засобів клієнтських технологій *(Client Technologies)* платформи *Java SE*.\r\n\r\n### Завдання\r\n\r\nРозробити графічний інтерфейс користувача для програми рішення [лабораторної роботи №8](#task_08) з використанням засобів платформи [JavaFX](http://docs.oracle.com/javase/8/javase-clienttechnologies.htm) ([Working with JavaFX UI Components](http://docs.oracle.com/javase/8/javafx/user-interface-tutorial/)).\r\n\r\n<span id=\"summary_task_report\"></span>\r\n### Звіт\r\n\r\nВідповідає структурі [звітів з лабораторних робіт](#lab_report).\r\n\r\n### Зауваження\r\n\r\nЗа розсудом викладача дозволяється оформлення звіту в електронному вигляді з використанням засобів [Javadoc](http://www.oracle.com/technetwork/java/javase/documentation/javadoc-137458.html) або [Doxygen](http://www.stack.nl/~dimitri/doxygen/index.html) та [Markdown](https://ru.wikipedia.org/wiki/Markdown)-розмітки.\r\n\r\n---\r\n\r\n<span id=\"external_task\"></span>\r\n## Завдання для студентів заочної форми навчання <sup><abbr title=\"Уточнення завдання і засобів розробки за розсудом викладача\">[2](#note_summary)</abbr></sup>\r\n\r\n### Тема\r\n\r\nРозробка об'єктно-орієнтованих програм мовою *Java* для вирішення прикладних задач.\r\n\r\n### Мета\r\n\r\nПридбання навичок застосування об'єктно-орієнтованої [декомпозиції](https://uk.wikipedia.org/wiki/%D0%94%D0%B5%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%B7%D0%B8%D1%86%D1%96%D1%8F) при вирішенні прикладних задач мовою *Java*.\r\n\r\n### Завдання\r\n\r\n1. Розробити програму рішення [лабораторної роботи №8](#task_08).\r\n\r\n2. Оформити звіт, що містить опис розробленої програми та результат її тестування.\r\n\r\n3. Використовувати середовище розробки [Eclipse IDE](http://www.eclipse.org/downloads/).\r\n\r\n<span id=\"summary_task_report\"></span>\r\n### Звіт\r\n\r\nВідповідає структурі [звітів з лабораторних робіт](#lab_report).\r\n\r\n### Зауваження\r\n\r\nЗа розсудом викладача дозволяється оформлення звіту в електронному вигляді з використанням засобів [Javadoc](http://www.oracle.com/technetwork/java/javase/documentation/javadoc-137458.html) або [Doxygen](http://www.stack.nl/~dimitri/doxygen/index.html) та [Markdown](https://ru.wikipedia.org/wiki/Markdown)-розмітки.\r\n\r\n---\r\n\r\n<span id=\"examples\"></span>\r\n## [Приклади](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo)\r\n\r\n|  №  | Проект | Пакет | Зміст |\r\n| --- | ------ | ----- | ----- |\r\n|  1  | [demo](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo) | [ua.khpi.oop.demo01](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo/src/ua/khpi/oop/demo01) | Демонстрація структури проекту рішення завдання лабораторної роботи №1 |\r\n|  2  | [demo](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo) | [ua.khpi.oop.demo02](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo/src/ua/khpi/oop/demo02) | Демонстрація структури проекту рішення завдання лабораторної роботи №2 |\r\n|  3  | [demo](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo) | [ua.khpi.oop.demo03](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/demo/src/ua/khpi/oop/demo03) | Демонстрація визначення часу обробки даних |\r\n\r\n---\r\n\r\n<span id=\"appendixes\"></span>\r\n## [Додатки](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/doc)\r\n\r\n|  №  | Файл | Зміст |\r\n| --- | ---- | ----- |\r\n|  1  | [Java_Code_Conventions.pdf](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/doc/Java_Code_Conventions.pdf?_format=raw) | Java Code Conventions. Рекомендується до використання |\r\n|  2  | [oop_appendix_1.pdf](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/doc/oop_appendix_1.pdf?_format=raw) | Додаткові матеріали. Java: налаштування середовища розробки; робота з Git; основи роботи в середовищі Eclipse; робота з EGit; стиль кодування |\r\n|  3  | [oop_appendix_1.pdf](https://www.assembla.com/spaces/khpi-oop/subversion/source/HEAD/!nfo/doc/oop_appendix_2.pdf?_format=raw) | Додаткові матеріали. Приклад альбому звітів |\r\n\r\n---\r\n\r\n<span id=\"notes\"></span>\r\n## Примітки\r\n\r\n1. <span id=\"note_svn\"></span>*SVN-репозиторій* та хостінг на *assembla.com* використовувати за розсудом викладача.\r\n\r\n2. <span id=\"note_summary\"></span>Уточнення завдання і засобів розробки за розсудом викладача.\r\n\r\n---\r\n\r\n<span id=\"literature\"></span>\r\n## Література\r\n\r\n### Для новачків\r\n\r\n1. Кен Арнольд, Джеймс Гослинг. Язык программирования Java<br /> ISBN: [9780201634556](http://www.isbnsearch.org/isbn/9780201634556)<br /> Написана просто, містить багато корисної інформації. Джеймс Гослінг - один з авторів Java. Рекомендується всім, хто починає знайомитися з мовою. Має сенс переглянути і більш досвідченим програмістам.\r\n\r\n2. Хорстманн. Java 2. Том 1. Основы<br /> ISBN: [9780132354769](http://www.isbnsearch.org/isbn/9785845919588)<br /> Розглядаються різні аспекти мови - від використання assert до регулярних виразів і NIO.\r\n\r\n3. Дэвид Флэнаган. Java в примерах. Справочник<br /> ISBN: [9780596006204](http://www.isbnsearch.org/isbn/9780596006204), [9781449370824](http://www.isbnsearch.org/isbn/9781449370824)<br /> Містить безліч закінчених реалізацій окремих фрагментів технологій - RMI-виклики, доступ до баз через JDBC і т.д. Приклади прості для розуміння, їх можна легко модифікувати.\r\n\r\n### Для досвідчених\r\n\r\n4. Хорстманн. Java 2. Том 2. Тонкости программирования<br /> ISBN: [9780132354790](http://www.isbnsearch.org/isbn/9780132354790)<br /> Розглядаються більш серйозні теми - багатопоточне програмування, локалізація програми, питання безпеки, робота з XML.\r\n\r\n5. Брюс Эккель. Философия Java<br /> ISBN: [9780131872486](http://www.isbnsearch.org/isbn/9785496011273)<br /> Треба прочитати кожному розробнику. Про філософію мови, про її устрій, її підхід до опису світу і вирішення задач. Дуже глибока і корисна для розуміння, що таке Java. Новачкам буде марна.\r\n\r\n6. Джошуа Блох. Java. Эффективное программирование<br /> ISBN: [9780321356680](http://www.isbnsearch.org/isbn/9780321356680)<br /> У книзі 57 (78 у другому виданні) слабко пов'язаних одне з одним невеликих статей, що ілюструють тонкощі Java. Написана практиком з чималим досвідом. Читати, маючи серйозний досвід розробок.\r\n\r\n### Про розробку в цілому\r\n\r\n7. Стивен Стелтинг, Олав Маассен. Применение шаблонов Java<br /> ISBN: [9780130935380](http://www.isbnsearch.org/isbn/9780130935380)<br /> Присвячена шаблонами проектування - прийомам організації програм, які на практиці довели свою ефективність. Корисна, при проектуванні архітектури програм.\r\n\r\n8. Гамма, Хелм, Джонсон, Влиссидес. Приемы объектно-ориентированного проектирования. Патерны проектирования<br /> ISBN: [9780201633610](http://www.isbnsearch.org/isbn/9780201633610), [9780201634983](http://www.isbnsearch.org/isbn/9780201634983)<br /> Читати тільки в оригіналі! Перекладачі доклали всіх зусиль до того, щоб зіпсувати все до неможливості.\r\n\r\n9. Эрик Аллен. Типичные ошибки проектирования<br /> ISBN: [9781590590614](http://www.isbnsearch.org/isbn/9781590590614)<br /> Про те, як не треба робити. У ній зібрані типові помилки розробників. Корисна для тих, хто має деякий досвід.\r\n\r\n10. Брюс Тейт. Горький вкус Java<br /> ISBN: [9781930110434](http://www.isbnsearch.org/isbn/9781930110434)<br /> Зібрані помилки програмування з використанням J2EE - сервлетів, JSP, EJB і т.п.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}